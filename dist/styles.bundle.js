webpackJsonp([2],{

/***/ "../../../../../src/assets/fonts/bold/bold.eot":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "bold.2c825d3b861015cf9d99.eot";

/***/ }),

/***/ "../../../../../src/assets/fonts/bold/bold.otf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "bold.189fada3eeb3c49581d4.otf";

/***/ }),

/***/ "../../../../../src/assets/fonts/bold/bold.woff":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "bold.c115415fc543f24e7e11.woff";

/***/ }),

/***/ "../../../../../src/assets/fonts/bold/bold.woff2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "bold.388c9f66b98becae3445.woff2";

/***/ }),

/***/ "../../../../../src/assets/fonts/book/book.eot":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "book.d90f602605908cb461e4.eot";

/***/ }),

/***/ "../../../../../src/assets/fonts/book/book.otf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "book.53fdf51217e7fbda211e.otf";

/***/ }),

/***/ "../../../../../src/assets/fonts/book/book.woff":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "book.8b326105c113ae7e178e.woff";

/***/ }),

/***/ "../../../../../src/assets/fonts/book/book.woff2":
/***/ (function(module, exports) {

module.exports = "data:application/font-woff2;base64,"

/***/ }),

/***/ "../../../../../src/assets/fonts/light/light.eot":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "light.3dea2295d508f0de4f7e.eot";

/***/ }),

/***/ "../../../../../src/assets/fonts/light/light.otf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "light.6e67848d4cedefed5297.otf";

/***/ }),

/***/ "../../../../../src/assets/fonts/light/light.woff":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "light.5caed4e862ace0351bcd.woff";

/***/ }),

/***/ "../../../../../src/assets/fonts/light/light.woff2":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "light.15c5146a52fb864db2ce.woff2";

/***/ }),

/***/ "../../../../../src/assets/fonts/medium/medium.eot":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "medium.ad91a97cca82a4674923.eot";

/***/ }),

/***/ "../../../../../src/assets/fonts/medium/medium.otf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "medium.5497b125cb790b1d24d9.otf";

/***/ }),

/***/ "../../../../../src/assets/fonts/medium/medium.woff":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "medium.3c9fcf7a5a7ab639c561.woff";

/***/ }),

/***/ "../../../../../src/assets/fonts/medium/medium.woff2":
/***/ (function(module, exports) {

module.exports = "data:application/font-woff2;base64,"

/***/ }),

/***/ "../../../../../src/assets/fonts/semibold/semibold.eot":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "semibold.843af781e0fac5241313.eot";

/***/ }),

/***/ "../../../../../src/assets/fonts/semibold/semibold.otf":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "semibold.b2a81d4b0f3e7743209d.otf";

/***/ }),

/***/ "../../../../../src/assets/fonts/semibold/semibold.woff":
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__.p + "semibold.bdd3687200ee35455e22.woff";

/***/ }),

/***/ "../../../../../src/assets/fonts/semibold/semibold.woff2":
/***/ (function(module, exports) {

module.exports = "data:application/font-woff2;base64,"

/***/ }),

/***/ "../../../../../src/styles.css":
/***/ (function(module, exports, __webpack_require__) {

// style-loader: Adds some css to the DOM by adding a <style> tag

// load the styles
var content = __webpack_require__("../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/styles.css");
if(typeof content === 'string') content = [[module.i, content, '']];
// add the styles to the DOM
var update = __webpack_require__("../../../../style-loader/addStyles.js")(content, {});
if(content.locals) module.exports = content.locals;
// Hot Module Replacement
if(false) {
	// When the styles change, update the <style> tags
	if(!content.locals) {
		module.hot.accept("!!../node_modules/css-loader/index.js??ref--9-1!../node_modules/postcss-loader/index.js??postcss!./styles.css", function() {
			var newContent = require("!!../node_modules/css-loader/index.js??ref--9-1!../node_modules/postcss-loader/index.js??postcss!./styles.css");
			if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];
			update(newContent);
		});
	}
	// When the module is disposed, remove the <style> tags
	module.hot.dispose(function() { update(); });
}

/***/ }),

/***/ "../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/assets/fonts/fonts.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, "@font-face {\n  font-family: 'Light';\n  src: url(" + __webpack_require__("../../../../../src/assets/fonts/light/light.woff2") + ") format('woff2'),\n       url(" + __webpack_require__("../../../../../src/assets/fonts/light/light.woff") + ") format('woff'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/light/light.eot") + ") format('embedded-opentype'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/light/light.otf") + ") format('opentype');\n    font-weight: normal;\n}\n\n@font-face {\n  font-family: 'Book';\n  src: url(" + __webpack_require__("../../../../../src/assets/fonts/book/book.woff2") + ") format('woff2'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/book/book.woff") + ") format('woff'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/book/book.eot") + ") format('embedded-opentype'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/book/book.otf") + ") format('opentype');\n    font-weight: normal;\n}\n\n@font-face {\n  font-family: 'Medium';\n  src: url(" + __webpack_require__("../../../../../src/assets/fonts/medium/medium.woff2") + ") format('woff2'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/medium/medium.woff") + ") format('woff'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/medium/medium.eot") + ") format('embedded-opentype'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/medium/medium.otf") + ") format('opentype');\n    font-weight: normal;\n}\n\n@font-face {\n  font-family: 'Semibold';\n  src: url(" + __webpack_require__("../../../../../src/assets/fonts/semibold/semibold.woff2") + ") format('woff2'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/semibold/semibold.woff") + ") format('woff'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/semibold/semibold.eot") + ") format('embedded-opentype'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/semibold/semibold.otf") + ") format('opentype');\n    font-weight: normal;\n}\n\n@font-face {\n  font-family: 'Bold';\n  src: url(" + __webpack_require__("../../../../../src/assets/fonts/bold/bold.woff2") + ") format('woff2'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/bold/bold.woff") + ") format('woff'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/bold/bold.eot") + ") format('embedded-opentype'),\n    url(" + __webpack_require__("../../../../../src/assets/fonts/bold/bold.otf") + ") format('opentype');\n    font-weight: normal;\n}\n", ""]);

// exports


/***/ }),

/***/ "../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/styles.css":
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__("../../../../css-loader/lib/css-base.js")(false);
// imports
exports.i(__webpack_require__("../../../../css-loader/index.js?{\"sourceMap\":false,\"importLoaders\":1}!../../../../postcss-loader/index.js?{\"ident\":\"postcss\"}!../../../../../src/assets/fonts/fonts.css"), "");

// module
exports.push([module.i, "/*--------------------------------------------\nGeneral\n--------------------------------------------*/\n\n\n\n* {\n\tfont-weight: normal;\n\tbox-sizing: border-box;\n\tfont-weight: normal;\n\twebkit-font-smoothing: antialiased;\n\t-moz-osx-font-smoothing: grayscale;\n\t-webkit-font-smoothing: subpixel-antialiased;\n\t/*text-shadow: 0 0 1px rgba(0,0,0, .3);*/\n}\n\nh1, h2, h3, h4, h5, h6, p, span {\n\t-webkit-user-select: none;\n\t   -moz-user-select: none;\n\t    -ms-user-select: none;\n\t        user-select: none;\n\tcursor: default;\n}\n\nhtml, body {\n\twidth: 100%;\n\theight: 100%;\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n\tmargin: 0;\n\tbackground-color: rgb(0, 0, 10);\n}\n\na {\n\ttext-decoration: none;\n}\n\n\n/*----------------------------------------\nAFame Virtual Controller\n----------------------------------------*/\n\n.a-enter-vr-button {\n\tdisplay: none;\n}\n\n\n/*----------------------------------------\nGoogle Map Info Box\n----------------------------------------*/\n\n.gm-fullscreen-control {\n  display: none;\n}\n\n\n\n\n/*--------------------\nButton resets\n--------------------*/\n\nbutton {\n\tbackground-color: transparent;\n\tborder: none;\n\toutline: none;\n}\n\n\n/*--------------------\nInput resets\n--------------------*/\n\ninput, textarea, select {\n\tbackground-color: transparent;\n\tborder-radius: 0;\n\tborder: none;\n\toutline: none;\n}\n\ntextarea {\n  /*resize: none;*/\n}\n\n\n\n/*--------------------\nScroll bar\n--------------------*/\n\n::-webkit-scrollbar {\n    display: none;\n}\n\n@media (max-width: 1000px) {\n  /*.progresLine  {\n    display: none;\n\t}*/\n\n\t/* removes scrollbar space */\n\t/* makes scrollbar invisible */\n\t::-webkit-scrollbar {\n\t\t/*width: auto;  */\n\t\t/*background: auto;  */\n\t}\n}\n", ""]);

// exports


/***/ }),

/***/ "../../../../css-loader/lib/css-base.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "../../../../style-loader/addStyles.js":
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
var stylesInDom = {},
	memoize = function(fn) {
		var memo;
		return function () {
			if (typeof memo === "undefined") memo = fn.apply(this, arguments);
			return memo;
		};
	},
	isOldIE = memoize(function() {
		return /msie [6-9]\b/.test(self.navigator.userAgent.toLowerCase());
	}),
	getHeadElement = memoize(function () {
		return document.head || document.getElementsByTagName("head")[0];
	}),
	singletonElement = null,
	singletonCounter = 0,
	styleElementsInsertedAtTop = [];

module.exports = function(list, options) {
	if(typeof DEBUG !== "undefined" && DEBUG) {
		if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};
	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (typeof options.singleton === "undefined") options.singleton = isOldIE();

	// By default, add <style> tags to the bottom of <head>.
	if (typeof options.insertAt === "undefined") options.insertAt = "bottom";

	var styles = listToStyles(list);
	addStylesToDom(styles, options);

	return function update(newList) {
		var mayRemove = [];
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			domStyle.refs--;
			mayRemove.push(domStyle);
		}
		if(newList) {
			var newStyles = listToStyles(newList);
			addStylesToDom(newStyles, options);
		}
		for(var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];
			if(domStyle.refs === 0) {
				for(var j = 0; j < domStyle.parts.length; j++)
					domStyle.parts[j]();
				delete stylesInDom[domStyle.id];
			}
		}
	};
}

function addStylesToDom(styles, options) {
	for(var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];
		if(domStyle) {
			domStyle.refs++;
			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}
			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];
			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}
			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles(list) {
	var styles = [];
	var newStyles = {};
	for(var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};
		if(!newStyles[id])
			styles.push(newStyles[id] = {id: id, parts: [part]});
		else
			newStyles[id].parts.push(part);
	}
	return styles;
}

function insertStyleElement(options, styleElement) {
	var head = getHeadElement();
	var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];
	if (options.insertAt === "top") {
		if(!lastStyleElementInsertedAtTop) {
			head.insertBefore(styleElement, head.firstChild);
		} else if(lastStyleElementInsertedAtTop.nextSibling) {
			head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			head.appendChild(styleElement);
		}
		styleElementsInsertedAtTop.push(styleElement);
	} else if (options.insertAt === "bottom") {
		head.appendChild(styleElement);
	} else {
		throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");
	}
}

function removeStyleElement(styleElement) {
	styleElement.parentNode.removeChild(styleElement);
	var idx = styleElementsInsertedAtTop.indexOf(styleElement);
	if(idx >= 0) {
		styleElementsInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement(options) {
	var styleElement = document.createElement("style");
	styleElement.type = "text/css";
	insertStyleElement(options, styleElement);
	return styleElement;
}

function createLinkElement(options) {
	var linkElement = document.createElement("link");
	linkElement.rel = "stylesheet";
	insertStyleElement(options, linkElement);
	return linkElement;
}

function addStyle(obj, options) {
	var styleElement, update, remove;

	if (options.singleton) {
		var styleIndex = singletonCounter++;
		styleElement = singletonElement || (singletonElement = createStyleElement(options));
		update = applyToSingletonTag.bind(null, styleElement, styleIndex, false);
		remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true);
	} else if(obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function") {
		styleElement = createLinkElement(options);
		update = updateLink.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
			if(styleElement.href)
				URL.revokeObjectURL(styleElement.href);
		};
	} else {
		styleElement = createStyleElement(options);
		update = applyToTag.bind(null, styleElement);
		remove = function() {
			removeStyleElement(styleElement);
		};
	}

	update(obj);

	return function updateStyle(newObj) {
		if(newObj) {
			if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
				return;
			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;
		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag(styleElement, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (styleElement.styleSheet) {
		styleElement.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = styleElement.childNodes;
		if (childNodes[index]) styleElement.removeChild(childNodes[index]);
		if (childNodes.length) {
			styleElement.insertBefore(cssNode, childNodes[index]);
		} else {
			styleElement.appendChild(cssNode);
		}
	}
}

function applyToTag(styleElement, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		styleElement.setAttribute("media", media)
	}

	if(styleElement.styleSheet) {
		styleElement.styleSheet.cssText = css;
	} else {
		while(styleElement.firstChild) {
			styleElement.removeChild(styleElement.firstChild);
		}
		styleElement.appendChild(document.createTextNode(css));
	}
}

function updateLink(linkElement, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	if(sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = linkElement.href;

	linkElement.href = URL.createObjectURL(blob);

	if(oldSrc)
		URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ 2:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__("../../../../../src/styles.css");


/***/ })

},[2]);
//# sourceMappingURL=styles.bundle.js.map